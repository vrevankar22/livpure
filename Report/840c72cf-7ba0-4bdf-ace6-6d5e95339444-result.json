{"name": "test_verify_ReferAndEarn", "status": "failed", "statusDetails": {"message": "AssertionError: How does it work popup not displayed", "trace": "self = <testcases.test_smartWaterSubscription.TestSmartWaterSubscription object at 0x0000016AC834B790>\n\n    def test_verify_ReferAndEarn(self):\n>       self.verify_ReferAndEarn(readData(excel,'SignUp',15,1),readData(excel,'SignUp',15,3),\n                                 readData(excel,'SignUp',18,1),readData(excel,'SignUp',15,9),readData(excel,'SignUp',18,2))\n\ntestcases\\test_smartWaterSubscription.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <testcases.test_smartWaterSubscription.TestSmartWaterSubscription object at 0x0000016AC834B790>, email = 'testplandetails@gmail.com', password = 'Test@052'\nreferRs = 250, refCode = 'BF0ID2', liter = 20\n\n    def verify_ReferAndEarn(self,email,password,referRs,refCode,liter):\n        log = self.getLogger()\n        self.login(email,password)\n        self.click(SignUpPage.referEarnBtn)\n        self.driver.find_element(By.XPATH,\"(//b[contains(.,'\"+str(liter)+\"L free water*')])[1]\").is_displayed()\n        self.driver.find_element(By.XPATH,\"(//b[contains(.,'₹ \"+str(referRs)+\" Shopping Voucher')])[1]\").is_displayed()\n        invitePage = self.getText((By.XPATH,\"//h4[@class='refTit']['Refer now & Earn up to Rs. \"+str(referRs)+\"']\"))\n        assert str(referRs) in invitePage,'invite page and message not displayed'\n        log.info('invite page and message displayed')\n        time.sleep(5)\n        self.driver.find_element(By.XPATH,\"(//b[contains(.,'\"+str(liter)+\"L free water*')])[2]\").is_displayed()\n        assert self.driver.find_element(By.XPATH,\"(//b[contains(.,'₹ \"+str(referRs)+\" Shopping Voucher')])[2]\").is_displayed(),'Fail'\n        log.info('Pass')\n        self.click(SignUpPage.inviteRefCode)\n        refCode1 = self.driver.find_element(By.XPATH,\"//input[@class='RefCode']\").get_attribute(\"value\")\n        assert refCode1 == refCode, 'referral Code are not same from Customer dashboard and invite page'\n        log.info('referral Code are same from Customer dashboard and invite page')\n        self.hoverToElement(SignUpPage.copyCode)\n        tooltiptext = self.getText(SignUpPage.codeToolTip)\n        expectedText = 'Copy to clipboard'\n        assert tooltiptext.casefold() == expectedText.casefold(), 'Tooltip not displayed for Copy Icon'\n        log.info('Tooltip displayed for Copy Icon')\n        self.click(SignUpPage.copyCode)\n        copiedText = self.getText(SignUpPage.codeToolTip)\n        log.info(copiedText)\n        window_before = self.driver.window_handles[0]\n        self.click(SignUpPage.inviteWhatsapp)\n        window_after = self.driver.window_handles[1]\n        self.driver.switch_to.window(window_after)\n        assert self.driver.find_element(By.XPATH,\"//div[text()='WhatsApp Web']\").is_displayed(),'Whatapp not opened'\n        log.info('Whatsapp opened')\n        self.driver.close()\n        self.driver.switch_to.window(window_before)\n        self.click(SignUpPage.inviteFB)\n        window_After1 = self.driver.window_handles[1]\n        self.driver.switch_to.window(window_After1)\n        FBtitle = self.driver.title\n        assert 'Facebook' in FBtitle, 'FB not opened'\n        log.info('FB page displayed')\n        self.driver.close()\n        self.driver.switch_to.window(window_before)\n        self.click(SignUpPage.howdoesitwork)\n>       assert self.driver.find_element(By.XPATH,\"//div[@class='popup bgOuter']\").is_displayed(),'How does it work popup not displayed'\nE       AssertionError: How does it work popup not displayed\n\nPages\\smartWaterSubscriptionPage.py:499: AssertionError"}, "attachments": [{"name": "log", "source": "42a950fa-fabd-4069-8777-8aa42d5cd3a3-attachment.txt", "type": "text/plain"}], "start": 1625055218621, "stop": 1625055236257, "uuid": "478485f7-afc6-4af8-a0cf-b2a99a6e9010", "historyId": "3274df656fa4ec9f5432e5dcfebb44de", "testCaseId": "c76cf2ecf9f2536d5c220e3f01b161ad", "fullName": "testcases.test_smartWaterSubscription.TestSmartWaterSubscription#test_verify_ReferAndEarn", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_smartWaterSubscription"}, {"name": "subSuite", "value": "TestSmartWaterSubscription"}, {"name": "host", "value": "RPS-SBC-L-0008"}, {"name": "thread", "value": "29744-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_smartWaterSubscription"}]}